import { CiShoppingCart } from "react-icons/ci";
import {
	Button,
	Container,
	ProductDetailImage,
	SidebarProductContainer,
} from "../../components/Client";
import { toast } from "react-toastify";

import { FaRegHeart } from "react-icons/fa6";
import GiftBox from "../../assets/images/giftbox.png";
import check from "../../assets/images/check.png";
import smallGift from "../../assets/images/small_gift.png";
import camket1 from "../../assets/images/camket_1.png";
import productSupport from "../../assets/images/evo_product_support.jpg";
import chinhsach_1 from "../../assets/images/chinhsach_1.png";
import { useEffect, useRef, useState } from "react";
import { useParams } from "react-router-dom";
import { TailSpin } from "react-loader-spinner";
import formatPriceVND from "../../utils/formatPriceVND";
import { useCart } from "../../context/CartContext";
import { ScrollToTopOnRouteChange } from "../../components/Client";
import publicProductService from "../../services/publicApi/PublicProductService";

function DetailProduct() {
	const [product, setProduct] = useState({});
	const [quantity, setQuantity] = useState(1);
	const [expanded, setExpanded] = useState(false);
	const [isOverflowing, setIsOverflowing] = useState(false);
	const contentRef = useRef(null);
	const [isShowDesc, setIsShowDesc] = useState(true);
	const [loading, setLoading] = useState(false);
	const { addToCart } = useCart();

	const { id } = useParams();
	useEffect(() => {
		const fetchData = async () => {
			try {
				setLoading(true);
				const res = await publicProductService.getById(id);
				console.log("res detail product: ", res);
				setProduct(res.data.data[0]);
			} catch (error) {
				console.log("error: ", error);
			} finally {
				setLoading(false);
			}
		};

		fetchData();
	}, [id]);

	useEffect(() => {
		if (!contentRef.current) return;

		const observer = new ResizeObserver(() => {
			const contentEl = contentRef.current;
			if (contentEl) {
				const hasOverflow =
					contentEl.scrollHeight > contentEl.clientHeight;
				setIsOverflowing(hasOverflow);
			}
		});

		observer.observe(contentRef.current);

		return () => {
			observer.disconnect();
		};
	}, [product?.description, isShowDesc]);

	const handleUpdateQuantity = (action) => {
		if (action === "up") {
			setQuantity(quantity + 1);
		}

		if (action === "down") {
			setQuantity(quantity - 1);
		}
	};

	const handleUpdateOrder = () => {
		const numericQuantity = Number(quantity);
		const price = product.price;
		const discount = product.discount || 0;
		const finalPrice = (price - discount) * numericQuantity;

		const item = {
			id: crypto.randomUUID(),
			orderId: null,
			productId: product.id,
			quantity: numericQuantity,
			price,
			discount,
			finalPrice,
		};

		addToCart(item);
		toast.success("üõí ƒê√£ th√™m v√†o gi·ªè h√†ng!", {
			position: "top-right",
		});
	};

	return (
		<Container>
			<ScrollToTopOnRouteChange />
			<div className="grid grid-cols-12 gap-8">
				{loading ? (
					<div className="col-span-9 flex justify-center items-center min-h-[300px]">
						<TailSpin
							height="50"
							width="50"
							color="#1D4ED8"
							ariaLabel="loading"
						/>
					</div>
				) : (
					<>
						<div className="col-span-4">
							<ProductDetailImage images={product?.images} />
						</div>
						<div className="col-span-5">
							<h3 className="text-[24px] font-bold">
								{product?.title}
							</h3>
							<div className="grid grid-cols-12 text-[16px] mt-4 font-bold gap-1">
								<div className="col-span-6">
									<p>
										Th∆∞∆°ng hi·ªáu:{" "}
										<span className="text-darkBlue">
											{product?.brandName}
										</span>
									</p>
								</div>
								<div className="col-span-6">
									<p>
										Lo·∫°i:{" "}
										<span className="text-darkBlue">
											{product?.categoryName}
										</span>
									</p>
								</div>
								<div className="col-span-6">
									<p>
										T√¨nh tr·∫°ng:{" "}
										<span className="text-darkBlue">{`Con h√†ng: ${product.inventory}`}</span>
									</p>
								</div>
								<div className="col-span-6">
									<p>
										M√£ s·∫£n ph·∫©m:{" "}
										<span className="text-darkBlue">
											{product?.id}
										</span>
									</p>
								</div>
							</div>

							<div className="p-[10px] bg-[#d9e6ff] mt-2 rounded-md text-[30px] text-primary font-bold">
								{formatPriceVND(product?.price)}
							</div>
							<div className="flex flex-col gap-2 mt-4">
								<span className="text-sm text-black font-bold">
									S·ªë l∆∞·ª£ng:
								</span>
								<div className="inline-flex w-fit items-center justify-between  p-[2px] gap-1 rounded-md border border-darkBlue">
									<Button
										buttonSize="w-[35px] h-[35px]"
										color="text-white"
										hoverEffect="hover:bg-primary"
										fontSize="text-[20px]"
										background="bg-darkBlue"
										onClick={() =>
											handleUpdateQuantity("down")
										}
									>
										-
									</Button>
									<input
										className="text-primary font-medium mx-4 border-0 outline-0 inline-block w-[60px] h-[35px] text-center text-[15px]"
										value={quantity}
										onChange={(e) =>
											setQuantity(e.target.value)
										}
									/>

									<Button
										buttonSize="w-[35px] h-[35px]"
										color="text-white"
										fontSize="text-[20px]"
										background="bg-darkBlue"
										hoverEffect="hover:bg-primary"
										onClick={() =>
											handleUpdateQuantity("up")
										}
									>
										+
									</Button>
								</div>
							</div>
							<div className="flex items-center gap-1 mt-2 overflow-hidden">
								<div className="hover:bg-success cursor-pointer hover:border-success group border-2 border-primary rounded-md bg-primary h-[50px] text-white w-[88%] flex items-center">
									<div dir="ltr" className=" h-[100%]">
										<div className="bg-white h-[100%] rounded-s-md w-[60px] flex items-center justify-center">
											<CiShoppingCart
												color="darkBlue"
												className="w-[30px] h-[30px]"
											/>
										</div>
									</div>
									<div
										className="flex flex-col items-center bg-primary flex-1 group-hover:bg-success"
										onClick={handleUpdateOrder}
									>
										<span className="text-sm font-bold">
											Th√™m v√†o gi·ªè h√†ng
										</span>
										<span className="text-[12px]">
											Giao h√†ng t·∫≠n n∆°i mi·ªÖn ph√≠
										</span>
									</div>
								</div>
								<div className="flex-1 h-[50px] rounded-md bg-primary hover:bg-success cursor-pointer flex items-center justify-center">
									<FaRegHeart
										className="w-[25px] h-[25px]"
										color="white"
									/>
								</div>
							</div>

							<div className="inline-flex px-[15px] py-[7px] rounded-tl-md rounded-tr-md items-center gap-3 mt-4 bg-darkBlue">
								<img
									src={GiftBox}
									className="w-[30px] h-[30px] object-cover"
								/>
								<span className="text-sm text-white font-bold">
									Khuy·∫øn m√£i ƒë·∫∑c bi·ªát !!!
								</span>
							</div>
							<div className="border border-darkBlue rounded-tr-md  rounded-br-md rounded-bl-md flex flex-col gap-3 pt-[25px] pb-[5px] px-[15px]">
								<div className="flex items-center gap-3">
									<img
										src={check}
										className="w-5 h-5 object-cover"
									/>
									<span className="text-sm text-black">
										√Åp d·ª•ng Phi·∫øu qu√† t·∫∑ng/ M√£ gi·∫£m gi√° theo
										ng√†nh h√†ng
									</span>
								</div>
								<div className="flex items-center gap-3">
									<img
										src={check}
										className="w-5 h-5 object-cover"
									/>
									<span className="text-sm text-black">
										√Åp d·ª•ng Phi·∫øu qu√† t·∫∑ng/ M√£ gi·∫£m gi√° theo
										ng√†nh h√†ng
									</span>
								</div>
								<div className="flex items-center gap-3">
									<img
										src={smallGift}
										className="w-5 h-5 object-cover"
									/>
									<span className="text-sm text-black">
										T·∫∑ng 100.000‚Ç´ mua h√†ng t·∫°i website th√†nh
										vi√™n Dola Watch, √°p d·ª•ng khi mua Online
										t·∫°i H·ªì Ch√≠ Minh v√† 1 s·ªë khu v·ª±c kh√°c.
									</span>
								</div>
							</div>

							<h3 className="text-[16px] font-bold text-black mt-4">
								Cam k·∫øt c·ªßa ch√∫ng t√¥i
							</h3>
							<div className="grid grid-cols-12 gap-1 mt-2">
								<div className="col-span-6 flex items-center gap-3">
									<img
										src={camket1}
										className="w-[26px] h-[26px] object-cover"
									/>
									<span className="text-sm text-black font-medium">
										Cam k·∫øt 100% ch√≠nh h√£ng
									</span>
								</div>
								<div className="col-span-6 flex items-center gap-3">
									<img
										src={camket1}
										className="w-[26px] h-[26px] object-cover"
									/>
									<span className="text-sm text-black font-medium">
										Ho√†n ti·ªÅn 111% n·∫øu h√†ng gi·∫£
									</span>
								</div>
								<div className="col-span-6 flex items-center gap-3">
									<img
										src={camket1}
										className="w-[26px] h-[26px] object-cover"
									/>
									<span className="text-sm text-black font-medium">
										Giao t·∫≠n tay kh√°ch h√†ng
									</span>
								</div>
								<div className="col-span-6 flex items-center gap-3">
									<img
										src={camket1}
										className="w-[26px] h-[26px] object-cover"
									/>
									<span className="text-sm text-black font-medium">
										M·ªü h·ªôp ki·ªÉm tra nh·∫≠n h√†ng
									</span>
								</div>
								<div className="col-span-6 flex items-center gap-3">
									<img
										src={camket1}
										className="w-[26px] h-[26px] object-cover"
									/>
									<span className="text-sm text-black font-medium">
										H·ªó tr·ª£ 24/7
									</span>
								</div>
								<div className="col-span-6 flex items-center gap-3">
									<img
										src={camket1}
										className="w-[26px] h-[26px] object-cover"
									/>
									<span className="text-sm text-black font-medium">
										ƒê·ªïi tr·∫£ trong 7 ng√†y
									</span>
								</div>
							</div>
						</div>
					</>
				)}

				<div className="col-span-3">
					<div className="p-[10px] shadow-md rounded-md border border-gray-100">
						<h3 className="text-sm text-black uppercase font-bold text-center">
							CH√öNG T√îI LU√îN S·∫¥N S√ÄNG <br /> ƒê·ªÇ GI√öP ƒê·ª† B·∫†N
						</h3>
						<div className="flex items-center justify-center flex-col gap-3">
							<img
								src={productSupport}
								className="w-[150px] h-[150px] object-cover"
							/>
							<p className="text-sm text-black ">
								ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t. H√£y g·ªçi
							</p>
							<h2 className="text-[30px] font-bold text-darkBlue">
								1900 6750
							</h2>
							<div className="after:content-[''] after:block w-full h-[1px] bg-gray/15 relative">
								<span className="text-[13px] text-gray px-[10px] bg-white absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 m-0">
									Ho·∫∑c
								</span>
							</div>
							<span className="text-sm text-black font-bold">
								Chat ho·∫∑c h·ªó tr·ª£ tr·ª±c tuy·∫øn
							</span>
							<Button
								subClass="mt-4"
								fontSize="text-[16px]"
								color="text-white"
								fontWeight="font-bold"
								background="bg-darkBlue"
								buttonWidth="w-full"
								padding="py-[10px]"
								hoverEffect="hover:bg-primary"
							>
								Chat v·ªõi ch√∫ng t√¥i
							</Button>
						</div>
					</div>

					<div className="flex flex-col gap-3 mt-4">
						<div className="rounded-md shadow-md border border-gray-100 p-[10px] flex items-center gap-2">
							<img
								src={chinhsach_1}
								className="w-10 h-10 object-cover"
							/>
							<div className="flex flex-col">
								<span className="text-[16px] text-darkBlue font-bold">
									Mi·ªÖn ph√≠ v·∫´n chuy·ªÉn
								</span>
								<span className="text-sm text-black font-medium">
									ƒê·ªëi v·ªõi s·∫£n ph·∫©m l·ªói s·∫£n xu·∫•t ho·∫∑c v·∫≠n
									chuy·ªÉn
								</span>
							</div>
						</div>
						<div className="rounded-md shadow-md border border-gray-100 p-[10px] flex items-center gap-2">
							<img
								src={chinhsach_1}
								className="w-10 h-10 object-cover"
							/>
							<div className="flex flex-col">
								<span className="text-[16px] text-darkBlue font-bold">
									Mi·ªÖn ph√≠ v·∫´n chuy·ªÉn
								</span>
								<span className="text-sm text-black font-medium">
									ƒê·ªëi v·ªõi s·∫£n ph·∫©m l·ªói s·∫£n xu·∫•t ho·∫∑c v·∫≠n
									chuy·ªÉn
								</span>
							</div>
						</div>
						<div className="rounded-md shadow-md border border-gray-100 p-[10px] flex items-center gap-2">
							<img
								src={chinhsach_1}
								className="w-10 h-10 object-cover"
							/>
							<div className="flex flex-col">
								<span className="text-[16px] text-darkBlue font-bold">
									Mi·ªÖn ph√≠ v·∫´n chuy·ªÉn
								</span>
								<span className="text-sm text-black font-medium">
									ƒê·ªëi v·ªõi s·∫£n ph·∫©m l·ªói s·∫£n xu·∫•t ho·∫∑c v·∫≠n
									chuy·ªÉn
								</span>
							</div>
						</div>
						<div className="rounded-md shadow-md border border-gray-100 p-[10px] flex items-center gap-2">
							<img
								src={chinhsach_1}
								className="w-10 h-10 object-cover"
							/>
							<div className="flex flex-col">
								<span className="text-[16px] text-darkBlue font-bold">
									Mi·ªÖn ph√≠ v·∫´n chuy·ªÉn
								</span>
								<span className="text-sm text-black font-medium">
									ƒê·ªëi v·ªõi s·∫£n ph·∫©m l·ªói s·∫£n xu·∫•t ho·∫∑c v·∫≠n
									chuy·ªÉn
								</span>
							</div>
						</div>
					</div>
				</div>
				<div className="col-span-12 mt-12">
					<div className="grid grid-cols-12 gap-4">
						<div className="col-span-9 mt-4">
							<div className="flex items-center gap-3">
								<Button
									fontSize="text-[16px]"
									color={
										isShowDesc
											? "text-white"
											: "text-darkBlue"
									}
									fontWeight="font-bold"
									border="border border-darkBlue"
									rounded="rounded-md"
									background={
										isShowDesc ? "bg-darkBlue" : "bg-white"
									}
									padding="px-[15px] py-[10px]"
									hoverEffect="hover:bg-darkBlue hover:text-white"
									onClick={() => setIsShowDesc(true)}
								>
									M√¥ t·∫£ s·∫£n ph·∫©m
								</Button>
								<Button
									fontSize="text-[16px]"
									color={
										!isShowDesc
											? "text-white"
											: "text-darkBlue"
									}
									fontWeight="font-bold"
									border="border border-darkBlue"
									rounded="rounded-md"
									background={
										!isShowDesc ? "bg-darkBlue" : "bg-white"
									}
									hoverEffect="hover:bg-darkBlue hover:text-white"
									padding="px-[15px] py-[10px]"
									onClick={() => setIsShowDesc(false)}
								>
									H∆∞·ªõng d·∫´n mua h√†ng
								</Button>
							</div>

							<div
								className={`border border-darkBlue p-[10px] rounded-md mt-4 relative transition-all duration-300`}
							>
								{isShowDesc ? (
									<div
										ref={contentRef}
										dangerouslySetInnerHTML={{
											__html: product?.description,
										}}
										className={`transition-all overflow-hidden ${
											expanded ? "max-h-full" : ""
										}`}
									></div>
								) : (
									<div
										ref={contentRef}
										className={`transition-all overflow-hidden ${
											expanded ? "max-h-full" : ""
										}`}
									>
										<div className="flex flex-col gap-4 h-full">
											<p>
												<strong>B∆∞·ªõc 1:</strong>
												&nbsp;Truy c·∫≠p website v√† l·ª±a
												ch·ªçn s·∫£n ph·∫©m&nbsp;c·∫ßn mua
											</p>
											<p>
												<strong>B∆∞·ªõc 2:</strong>
												&nbsp;Click v√† s·∫£n ph·∫©m mu·ªën
												mua, m√†n h√¨nh hi·ªÉn th·ªã ra pop up
												v·ªõi c√°c l·ª±a ch·ªçn sau
											</p>
											<p>
												N·∫øu b·∫°n mu·ªën ti·∫øp t·ª•c mua h√†ng:
												B·∫•m v√†o ph·∫ßn ti·∫øp t·ª•c mua h√†ng
												ƒë·ªÉ l·ª±a ch·ªçn th√™m s·∫£n ph·∫©m v√†o
												gi·ªè h√†ng
											</p>
											<p>
												N·∫øu b·∫°n mu·ªën xem gi·ªè h√†ng ƒë·ªÉ c·∫≠p
												nh·∫≠t s·∫£n ph·∫©m: B·∫•m v√†o xem gi·ªè
												h√†ng
											</p>
											<p>
												N·∫øu b·∫°n mu·ªën ƒë·∫∑t h√†ng v√† thanh
												to√°n cho s·∫£n ph·∫©m n√†y vui l√≤ng
												b·∫•m v√†o: ƒê·∫∑t h√†ng v√† thanh to√°n
											</p>
											<p>
												<strong>B∆∞·ªõc 3:</strong>
												&nbsp;L·ª±a ch·ªçn th√¥ng tin t√†i
												kho·∫£n thanh to√°n
											</p>
											<p>
												N·∫øu b·∫°n ƒë√£ c√≥ t√†i kho·∫£n vui l√≤ng
												nh·∫≠p th√¥ng tin t√™n ƒëƒÉng nh·∫≠p l√†
												email v√† m·∫≠t kh·∫©u v√†o m·ª•c ƒë√£ c√≥
												t√†i kho·∫£n tr√™n h·ªá th·ªëng
											</p>
											<p>
												N·∫øu b·∫°n ch∆∞a c√≥ t√†i kho·∫£n v√†
												mu·ªën ƒëƒÉng k√Ω t√†i kho·∫£n vui l√≤ng
												ƒëi·ªÅn c√°c th√¥ng tin c√° nh√¢n ƒë·ªÉ
												ti·∫øp t·ª•c ƒëƒÉng k√Ω t√†i kho·∫£n. Khi
												c√≥ t√†i kho·∫£n b·∫°n s·∫Ω d·ªÖ d√†ng theo
												d√µi ƒë∆∞·ª£c ƒë∆°n h√†ng c·ªßa m√¨nh
											</p>
											<p>
												N·∫øu b·∫°n mu·ªën mua h√†ng m√† kh√¥ng
												c·∫ßn t√†i kho·∫£n vui l√≤ng nh·∫•p
												chu·ªôt v√†o m·ª•c ƒë·∫∑t h√†ng kh√¥ng c·∫ßn
												t√†i kho·∫£n
											</p>
											<p>
												<strong>B∆∞·ªõc 4:</strong>
												&nbsp;ƒêi·ªÅn c√°c th√¥ng tin c·ªßa b·∫°n
												ƒë·ªÉ nh·∫≠n ƒë∆°n h√†ng, l·ª±a ch·ªçn h√¨nh
												th·ª©c thanh to√°n v√† v·∫≠n chuy·ªÉn
												cho ƒë∆°n h√†ng c·ªßa m√¨nh
											</p>
											<p>
												<strong>B∆∞·ªõc 5:</strong>
												&nbsp;Xem l·∫°i th√¥ng tin ƒë·∫∑t
												h√†ng, ƒëi·ªÅn ch√∫ th√≠ch v√† g·ª≠i ƒë∆°n
												h√†ng
											</p>
											<p>
												Sau khi nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng b·∫°n
												g·ª≠i ch√∫ng t√¥i s·∫Ω li√™n h·ªá b·∫±ng
												c√°ch g·ªçi ƒëi·ªán l·∫°i ƒë·ªÉ x√°c nh·∫≠n
												l·∫°i ƒë∆°n h√†ng v√† ƒë·ªãa ch·ªâ c·ªßa b·∫°n.
											</p>
											<p>Tr√¢n tr·ªçng c·∫£m ∆°n.</p>
										</div>
									</div>
								)}

								{isShowDesc && !expanded && isOverflowing && (
									<div className="flex items-center justify-center bg-white/95 w-[98%] py-8 absolute bottom-0">
										<Button
											border="border border-darkBlue"
											background="bg-white"
											color="text-darkBlue"
											fontSize="text-[16px]"
											padding="py-[5px] px-[15px]"
											hoverEffect="hover:bg-primary hover:border-primary hover:text-white"
											onClick={() => setExpanded(true)}
										>
											Xem th√™m
										</Button>
									</div>
								)}
							</div>
						</div>

						<div className="col-span-3 flex flex-col gap-12">
							<SidebarProductContainer />
							<SidebarProductContainer />
						</div>
					</div>
				</div>

				{/* <div className="col-span-12 mt-8">
					<ProductSwiper />
					<ProductSwiper />
				</div> */}
			</div>
		</Container>
	);
}

export default DetailProduct;
